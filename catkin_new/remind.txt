https://docs.opencv.org/3.1.0/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57


https://blog.csdn.net/u010260681/article/details/77089657


http://cache.baiducontent.com/c?m=TtSrjO6ra7FFfILFsjVl9Ez66PReIG1J5QtkMWCQk49keMdm-KRU3f6rzE4X6HXl1NBxLAdd1mwz29yc6DFkNyhHrP5jYVVIxZs6LZlJh1jALU91eXw7E-PWEZvIZkxWwB7FB-VTrPKFu6Oc7alhXF9Z_l4dsBwa_uG31DVhfWFJU-kXpIrhw-xsTh-oTV8Ty-f-YCTb_sddar4YoNTqzafPFd98v7ncZj8uOi6gvtq&p=803fc54adcd25dfc57efce3f4a&newp=8365c21085cc43ff57e7db625a53d8224216ed673cd3c44324b9d71fd325001c1b69e7b12c27160fd8c5776603a94257ecf43478341766dada9fca458ae7c4&s=98f13708210194c4&user=baidu&fm=sc&query=cv%3A%3Aaruco%3A%3ADetectorParameters%3A%3ADetectorParameters&qid=abb2defa0000a80b&p1=11


http://brightguo.com/aruco-marker-detect/


https://www.baidu.com/s?wd=cv%3A%3Aaruco%3A%3ADetectorParameters%3A%3ADetectorParameters&rsv_spt=1&rsv_iqid=0xd387e73e00000346&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=baiduhome_pg&rsv_enter=1&rsv_dl=tb&rsv_btype=t&inputT=935&rsv_t=ab01Jxfng8SvxIV57OBivTjVxN4OFN8xEYkyuWneVVg%2FFXADIVrOQZ%2B8esEbARglQDL2&oq=opencv%2520aruco%2520%25E5%258F%2582%25E6%2595%25B0&rsv_pq=9dfb576d00000765&rsv_sug3=18&rsv_n=2&rsv_sug2=0&prefixsug=cv%253A%253Aaruco%253A%253ADetectorParameters%253A%253ADetectorParameters&rsp=2&rsv_sug4=935







matlab标定得到的矩阵跟cv是转置关系



cv::solvePnP(objectPts, ImagePts, cameraMatrix, distcoeffs, rvec, tvec);                
// std::cout<<rvec<<std::endl;                
std::cout<<tvec<<std::endl;                
cv::Affine3d cam_to_drone = cv::Affine3d(rvec, tvec);
cv::Matx44d world_to_cam_mtx( 0, 0, 1,   0,-1, 0, 0,   0,0,-1, 0, 0.611, 0, 0, 0,   1); 
0  0  1  0
-1 0  0  0
0  -1 0  0
0  0   0 1
cv::Affine3d world_to_cam(world_to_cam_mtx);
cv::Affine3d world_to_drone = cam_to_drone.concatenate(world_to_cam);
tf::Quaternion q;
double theta = sqrt(world_to_drone.rvec()[0] * world_to_drone.rvec()[0] + world_to_drone.rvec()[1] * world_to_drone.rvec()[1] + world_to_drone.rvec()[2] * world_to_drone.rvec()[2]);
tf::Vector3 axis = tf::Vector3(world_to_drone.rvec()[0]/theta,  world_to_drone.rvec()[1]/theta, world_to_drone.rvec()[2]/theta);   q.setRotation(axis,theta);
// tf::Transform transform;                
// transform.setOrigin(tf::Vector3(pose_raw.translation()[0],pose_raw.translation()[1],pose_raw.translation()[2]));                
// transform.setRotation(q);
// br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", "drone"));
geometry_msgs::PoseStamped world_to_drone_posestamped;
world_to_drone_posestamped.header.stamp = ros::Time::now();
world_to_drone_posestamped.pose.position.x = world_to_drone.translation()[0] / 1000.0;
world_to_drone_posestamped.pose.position.y = world_to_drone.translation()[1] / 1000.0; 
world_to_drone_posestamped.pose.position.z = world_to_drone.translation()[2] / 1000.0;
world_to_drone_posestamped.pose.orientation.w = q.w();
world_to_drone_posestamped.pose.orientation.x = q.x();
world_to_drone_posestamped.pose.orientation.y = q.y();
world_to_drone_posestamped.pose.orientation.z = q.z();
pose_pub.publish(world_to_drone_posestamped);



matx44d矩阵初始化方法



 生成消息步骤及报错原因

http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Common_step_for_msg_and_srv

https://blog.csdn.net/jinking01/article/details/79620911


我的msg定义为
std_msgs/Header header
geometry_msgs/Pose pose
uint8 id
所以要在cmakelists里面find_package()中添加std_msgs和geometry_msgs
然后在gernerate_messages()中添加std_msgs和geometry_msgs








realsense T265使用
获取鱼眼相机数据
https://blog.csdn.net/u013595260/article/details/108470791
注意要同时开启两个





realsense函数demo库
https://github.com/IntelRealSense/librealsense/tree/master/wrappers/python/examples

直接消息获取t265的/image_raw图像
cv::bridge
rwiki.ros.org/image_transport/Tutorials/PublishingImages
https://blog.csdn.net/dengheCSDN/article/details/78351453
https://blog.csdn.net/dengheCSDN/article/details/78983993

空指针引发的灾难
https://blog.csdn.net/coldplayplay/article/details/78580727

鱼眼相机标定
https://blog.csdn.net/qq_30263737/article/details/105694765

opencv官方的标定
https://docs.opencv.org/master/d4/d94/tutorial_camera_calibration.html
https://github.com/opencv/opencv/blob/master/samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp


cv_bridge python参考
http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython



ls /dev/video*





